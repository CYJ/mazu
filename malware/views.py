# -*- coding: utf-8 -*-
import os
import hashlib
import binascii

import magic
import ssdeep

from django.conf import settings
from django.contrib import messages
from django.shortcuts import render
from django.shortcuts import redirect
from django.views.generic.edit import FormView
from django.views.generic.edit import CreateView
from django.views.generic.list import ListView

from django.core.urlresolvers import reverse_lazy

from .models import Malware
from .models import MalwareSource

from .forms import MalwareUploadForm
from .forms import MalwareSourceForm


def compute_hashes(fp):
    argos = ('md5', 'sha1', 'sha256', 'sha512')
    hashes = {}
    try:
        buff = fp.read()
    except AttributeError:
        pass
    else:
        for argo in argos:
            hashes[argo] = getattr(hashlib, argo)(buff).hexdigest()
        return hashes


def compute_ssdeep(fp):
    try:
        buff = fp.read()
    except AttributeError:
        pass
    else:
        return ssdeep.hash(buff)


def gather_fileinfo(fp):
    try:
        buff = fp.read()
    except AttributeError:
        pass
    else:
        return {
            'size': fp.size,
            'type': magic.from_buffer(buff),
            'crc32': binascii.crc32(buff)
        }


def gen_malware_cage(hash):
    cage_path = os.path.join(settings.BASE_DIR, 'storage')
    if not os.path.exists(cage_path):
        os.makedirs(cage_path)
    return os.path.join(cage_path, hash)


def handle_uploaded_malware(tmpfile):
    sha512 = hashlib.sha512(tmpfile.read()).hexdigest()
    cage = gen_malware_cage(sha512)
    with open(cage, 'wb+') as dest:
        for chunk in tmpfile.chunks():
            dest.write(chunk)


def malware_source_create(request):
    if request.method == 'POST':
        form = MalwareSourceForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'New malware source created.')
        else:
            messages.error(request, 'Please verify the form.')
    return redirect(reverse_lazy('malware_list'))


class MalwareUploadView(FormView):
    template_name = 'malware_upload.html'
    form_class = MalwareUploadForm
    success_url = '/thanks/'

    def post(self, request, *args, **kwargs):
        form = MalwareUploadForm(request.POST, request.FILES)
        if form.is_valid():
            tmpfile = request.FILES['malware']
            hashes = compute_hashes(tmpfile)
            fileinfo = gather_fileinfo(tmpfile)
            # merge dictionaries
            columns = dict(
                hashes.items() + fileinfo.items() +
                [('ssdeep', compute_ssdeep(tmpfile))] +
                [('desc', form.cleaned_data['desc'])]
            )
            instance = Malware(**columns)
            instance.save()
            handle_uploaded_malware(tmpfile)
        else:
            form = MalwareUploadForm()
        return render(request, 'malware_upload.html', {'form': form})


class MalwareListView(ListView):
    model = Malware
    template_name = 'malware_list.html'
    context_object_name = 'malwares'

    def get_context_data(self, **kwargs):
        context = super(MalwareListView, self).get_context_data(**kwargs)
        malware_sources = MalwareSource.objects.values('label', 'slug')
        source_form = MalwareSourceForm()
        context.update({'sources': malware_sources})
        context.update({'source_form': source_form})
        return context
