# -*- coding: utf-8 -*-
import os
import hashlib
import zipfile
import gridfs

from StringIO import StringIO

from pymongo import MongoClient

from settings.mongodb import MONGOHOST
from settings.mongodb import MONGOPORT
from settings.mongodb import STORAGE

from django.http import Http404
from django.http import HttpResponse
from django.conf import settings
from django.contrib import messages
from django.shortcuts import render
from django.shortcuts import redirect
from django.views.generic.edit import FormView
from django.views.generic.edit import CreateView
from django.views.generic.edit import UpdateView
from django.views.generic.edit import DeleteView
from django.views.generic.list import ListView
from django.views.generic.detail import DetailView

from django.core.urlresolvers import reverse_lazy

from .models import Malware
from .models import MalwareSource

from .forms import MalwareUploadForm
from .forms import MalwareUpdateForm
from .forms import MalwareSourceForm

from .utils import compute_hashes
from .utils import compute_ssdeep
from .utils import gather_basic_fileinfo


def connect_to_gridfs():
    mongodb = MongoClient(MONGOHOST, MONGOPORT)[STORAGE]
    return gridfs.GridFS(mongodb)


def malware_source_create(request):
    if request.method == 'POST':
        form = MalwareSourceForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'New malware source created.')
        else:
            messages.error(request, 'Please verify the form.')
    return redirect(reverse_lazy('malware_list'))


def malware_download(request, slug):
    gridfs = connect_to_gridfs()
    result = gridfs.find({'sha512': slug})
    if result.count() > 0:
        zipdata = StringIO()
        zipf = zipfile.ZipFile(zipdata, mode="w")
        zipf.writestr(result[0].filename, result[0].read())
        zipf.close()
        zipdata.seek(0)
        response = HttpResponse(zipdata.read())
        response['Content-Disposition'] = 'attachment; filename={}.zip'.format(slug)
        response['Content-Type'] = 'application/x-zip'
        return response
    else:
        raise Http404


class MalwareUploadView(FormView):
    template_name = 'malware_upload.html'
    form_class = MalwareUploadForm
    success_url = '/thanks/'

    def post(self, request, *args, **kwargs):
        form = MalwareUploadForm(request.POST, request.FILES)
        if form.is_valid():
            tmpfile = request.FILES['malware']
            hashes = compute_hashes(tmpfile)
            fileinfo = gather_basic_fileinfo(tmpfile)

            # merge dictionaries
            columns = dict(
                hashes.items() +
                fileinfo.items() +
                [('ssdeep', compute_ssdeep(tmpfile))] +
                [('desc', form.cleaned_data['desc'])]
            )
            instance = Malware(**columns)
            instance.save()

            # saves malware into gridfs
            gridfs = connect_to_gridfs()
            with gridfs.new_file() as fp:
                for chunk in tmpfile.chunks():
                    fp.write(chunk)

                for attr, value in hashes.items():
                    setattr(fp, attr, value)

                for attr, value in fileinfo.items():
                    setattr(fp, attr, value)

                fp.ssdeep = compute_ssdeep(tmpfile)
                fp.desc = form.cleaned_data['desc']
                fp.name = form.cleaned_data['name']
                fp.close()
            messages.success(request, 'New malware created.')
        else:
            form = MalwareUploadForm()
            messages.error(request, 'Please verify the form.')

        return render(request, 'malware_upload.html', {'form': form})


class MalwareUpdateView(UpdateView):
    template_name = 'malware_update.html'
    form_class = MalwareUpdateForm
    success_url = reverse_lazy('malware_list')

    def get_object(self):
        return Malware.objects.get(slug=self.kwargs['slug'])


class MalwareListView(ListView):
    model = Malware
    template_name = 'malware_list.html'
    context_object_name = 'malwares'

    def get_context_data(self, **kwargs):
        context = super(MalwareListView, self).get_context_data(**kwargs)
        malware_sources = MalwareSource.objects.values('label', 'slug')
        source_form = MalwareSourceForm()
        context.update({'sources': malware_sources})
        context.update({'source_form': source_form})
        return context


class MalwareDeleteView(DeleteView):
    model = Malware
    template_name = 'malware_delete.html'
    success_url = reverse_lazy('malware_list')

    def get_object(self, **kwargs):
        return Malware.objects.get(slug=self.kwargs['slug'])


class MalwareProfileView(DetailView):
    model = Malware
    template_name = 'malware_profile.html'
    context_object_name = 'malware'

    def get_object(self, **kwargs):
        return Malware.objects.get(slug=self.kwargs['slug'])
