# -*- coding: utf-8 -*-
import os
import logging

from django.http import Http404
from django.http import HttpResponse
from django.shortcuts import render
from django.shortcuts import redirect
from django.views.generic.edit import FormView
from django.views.generic.edit import CreateView
from django.views.generic.edit import UpdateView
from django.views.generic.edit import DeleteView
from django.views.generic.list import ListView
from django.views.generic.detail import DetailView
from django.core.urlresolvers import reverse_lazy
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.template import RequestContext

from models import Malware
from models import Source
from forms import MalwareUploadForm
from forms import MalwarePublishForm
from forms import MalwareUpdateForm
from forms import SourceForm
from utils import compute_hashes
from utils import compute_ssdeep
from utils import get_uploaded_file_info
from channel.models import Channel
from channel.models import Queue
from core.mongodb import connect_gridfs
from core.mongodb import get_compressed_file
from core.mongodb import delete_file


logger = logging.getLogger(__name__)


def download(request, slug):
    try:
        malware = get_compressed_file('sha512', slug)
    except Exception as e:
        logger.debug(e)
        messages.error(request, 'Oops! We got an error!')
        return render(request, 'error.html')
    else:
        if malware:
            response = HttpResponse(malware.read())
            response['Content-Disposition'] = 'attachment; filename={}.zip'.format(slug)
            response['Content-Type'] = 'application/x-zip'
            return response
        else:
            raise Http404


class MalwarePublishView(FormView):
    template_name = 'malware/publish.html'
    form_class = MalwarePublishForm
    success_url = reverse_lazy('malware.list')

    def get_initial(self):
        try:
            sha256 = self.kwargs['slug']
        except:
            return {}
        else:
            return {'malware_sha256': sha256}


class MalwareUploadView(FormView):
    template_name = 'malware/upload.html'
    form_class = MalwareUploadForm
    success_url = reverse_lazy('malware.upload')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(MalwareUploadView, self).dispatch(*args, **kwargs)

    def get_form(self, form_class):
        kwargs = self.get_form_kwargs()
        kwargs['user'] = self.request.user
        return form_class(
            **kwargs
        )

    def form_invalid(self, form):
        messages.info(
            self.request,
            "Your submission has not been saved. Try again."
        )
        return super(MalwareUploadView, self).form_invalid(form)

    def form_valid(self, form):
        malware = form.cleaned_data['malware']
        channels = form.cleaned_data['channels'] #list
        file_info = get_uploaded_file_info(malware)

        columns = file_info.copy()
        columns.update({
            'desc': form.cleaned_data['desc'],
            'name': form.cleaned_data['name']
        })
        # save malware into gridfs
        try:
            gridfs = connect_gridfs()
        except:
            messages.error(self.request, e)
        else:
            with gridfs.new_file() as fp:
                for chunk in malware.chunks():
                    fp.write(chunk)

                for attr, value in columns.items():
                    if attr != 'md5':
                        setattr(fp, attr, value)
                fp.close()

                # Save the owner and source of sample
                columns.update({
                    'source': form.cleaned_data['source'],
                    'user': form.user
                })
                sample = Malware(**columns)
                sample.save()
                # Save into pulishing queue 
                for c in channels:
                    Queue(malware=sample, channel=c).save()
            messages.success(self.request, 'New malware created.')
        return super(MalwareUploadView, self).form_valid(form)


class MalwareUpdateView(UpdateView):
    template_name = 'malware/update.html'
    form_class = MalwareUpdateForm
    success_url = reverse_lazy('malware.list')

    def get_object(self):
        return Malware.objects.get(slug=self.kwargs['slug'])


class MalwareListView(ListView):
    model = Malware
    template_name = 'malware/list.html'
    context_object_name = 'malwares'

    def get_context_data(self, **kwargs):
        context = super(MalwareListView, self).get_context_data(**kwargs)
        return context


class MalwareDeleteView(DeleteView):
    model = Malware
    template_name = 'malware/delete.html'
    success_url = reverse_lazy('malware.list')

    def get_object(self, **kwargs):
        return Malware.objects.get(slug=self.kwargs['slug'])

    def delete(self, request, *args, **kwargs):
        delete_file('sha512', self.kwargs['slug'])
        return super(MalwareDeleteView, self).delete(request, *args, **kwargs)


class MalwareProfileView(DetailView):
    model = Malware
    template_name = 'malware/profile.html'
    context_object_name = 'malware'

    def get_object(self, **kwargs):
        return Malware.objects.get(slug=self.kwargs['slug'])


class SourceCreateView(CreateView):
    model = Source
    template_name = 'malware_source/create.html'
    form_class = SourceForm
    fields = ['label', 'desc']
    success_url = reverse_lazy('source.list')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SourceCreateView, self).dispatch(*args, **kwargs)

    def form_valid(self, form):
        # Save the user
        form.instance.user = self.request.user
        return super(SourceCreateView, self).form_valid(form)


class SourceUpdateView(UpdateView):
    template_name = 'malware_source/update.html'
    form_class = SourceForm
    fields = ['label', 'desc']
    success_url = reverse_lazy('source.list')

    def get_object(self):
        return Source.objects.get(slug=self.kwargs['slug'])


class SourceListView(ListView):
    model = Source
    template_name = 'malware_source/list.html'
    context_object_name = 'malware_sources'

    def get_queryset(self):
        return self.model.objects.filter(user=self.request.user)


class SourceDeleteView(DeleteView):
    model = Source
    template_name = 'malware_source/delete.html'
    success_url = reverse_lazy('source.list')

    def get_object(self, **kwargs):
        return Source.objects.get(slug=self.kwargs['slug'])


class SourceProfileView(DetailView):
    model = Source
    template_name = 'malware_source/profile.html'
    context_object_name = 'malware_source'

    def get_object(self, **kwargs):
        return Source.objects.get(slug=self.kwargs['slug'])
