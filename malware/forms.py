# -*- coding: utf-8 -*-
from django import forms

from models import Source
from models import Malware
from utils import compute_hashes
from channel.models import Channel


class MalwareUploadForm(forms.Form):
    malware = forms.FileField(
        label='Malware'
    )
    name = forms.CharField(
        label='Name',
        required=False
    )
    desc = forms.CharField(
        widget=forms.Textarea,
        label='Description',
        required=False
    )
    publish = forms.BooleanField(
        label='Do you want publish?',
        required=False,
        help_text='Yes',
    )

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user')
        super(MalwareUploadForm, self).__init__(*args, **kwargs)
        self.fields['source'] = forms.ModelChoiceField(
            queryset=self.get_source_choices(self.user),
            label='Source',
            required=False
        )
        self.fields['channels'] = forms.ModelMultipleChoiceField(
            queryset=self.get_channels_choices(self.user),
            widget=forms.CheckboxSelectMultiple,
            label='Publish to',
            initial=self.get_channels_initial(self.user),
            required=False
        )

    def get_channels_choices(self, user):
        return Channel.objects.filter(owner=user)

    def get_channels_initial(self, user):
        channels = self.get_channels_choices(user)
        return (c for c in channels if c.default)

    def get_source_choices(self, user):
        return Source.objects.filter(user=user)

    def clean_malware(self):
        data = self.cleaned_data['malware']
        hashes = compute_hashes(data.read())
        if Malware.objects.filter(sha256=hashes['sha256']).count() > 0:
            raise forms.ValidationError('Duplicated Malware Sample.')
        data.seek(0)
        return data

    def clean(self):
        cleaned_data = super(MalwareUploadForm, self).clean()
        publish = cleaned_data['publish']
        channels = cleaned_data['channels']

        if publish:
            if len(channels) == 0:
                raise forms.ValidationError('Please select a channel at least.')
        else:
            cleaned_data['channels'] = []
        return cleaned_data


class MalwarePublishForm(forms.Form):
    channel_name = forms.MultipleChoiceField(
        label='Publish to',
        widget=forms.CheckboxSelectMultiple,
        required=True
    )
    malware_sha256 = forms.CharField(
        widget=forms.HiddenInput,
        label='',
        required=False
    )


class MalwareUpdateForm(forms.ModelForm):

    class Meta:
        model = Malware
        fields = ['name', 'source', 'link', 'type', 'size', 'crc32', 'md5',
                  'sha1', 'sha256', 'sha512', 'ssdeep', 'desc']
        labels = {
            'name': 'Name',
            'source': 'Source',
            'link': 'Link',
            'type': 'File Type',
            'size': 'File Size',
            'crc32': 'CRC32',
            'md5': 'MD5',
            'sha1': 'SHA1',
            'sha256': 'SHA256',
            'sha512': 'SHA512',
            'ssdeep': 'SSDEEP',
            'desc': 'Description'
        }


class SourceForm(forms.ModelForm):

    class Meta:
        model = Source
        fields = ['label', 'desc']
        labels = {
            'label': 'Label',
            'desc': 'Description'
        }
        widgets = {
            'label': forms.TextInput(),
            'desc': forms.Textarea()
        }
