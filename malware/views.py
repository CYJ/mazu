# -*- coding: utf-8 -*-
import os
import hashlib
import binascii

import magic
import ssdeep

from django.conf import settings
from django.shortcuts import render
from django.views.generic.edit import FormView
from django.views.generic.edit import CreateView

from .models import Malware, MalwareSource
from .forms import MalwareUploadForm


def compute_hashes(fp):
    argos = ('md5', 'sha1', 'sha256', 'sha512')
    hashes = {}
    try:
        buff = fp.read()
    except AttributeError:
        pass
    else:
        for argo in argos:
            hashes[argo] = getattr(hashlib, argo)(buff).hexdigest()
        return hashes


def compute_ssdeep(fp):
    try:
        buff = fp.read()
    except AttributeError:
        pass
    else:
        return ssdeep.hash(buff)


def gather_fileinfo(fp):
    try:
        buff = fp.read()
    except AttributeError:
        pass
    else:
        return {
            'size': fp.size,
            'type': magic.from_buffer(buff),
            'crc32': binascii.crc32(buff)
        }


def gen_malware_cage(hash):
    cage_path = os.path.join(settings.MEDIA_ROOT, 'storage')
    if not os.path.exists(cage_path):
        os.makedirs(cage_path)
    return os.path.join(cage_path, hash)


def handle_uploaded_malware(tmpfile):
    sha512 = hashlib.sha512(tmpfile.read()).hexdigest()
    cage = gen_malware_cage(sha512)
    with open(cage, 'wb+') as dest:
        for chunk in tmpfile.chunks():
            dest.write(chunk)


class MalwareUploadView(FormView):
    template_name = 'malware_upload.html'
    form_class = MalwareUploadForm
    success_url = '/thanks/'

    def post(self, request, *args, **kwargs):
        form = MalwareUploadForm(request.POST, request.FILES)
        if form.is_valid():
            tmpfile = request.FILES['malware']
            hashes = compute_hashes(tmpfile)
            fileinfo = gather_fileinfo(tmpfile)
            # merge dictionaries
            columns = dict(
                hashes.items() + fileinfo.items() +
                [('ssdeep', compute_ssdeep(tmpfile))] +
                [('desc', form.cleaned_data['description'])]
            )
            instance = Malware(**columns)
            instance.save()
            handle_uploaded_malware(tmpfile)
        else:
            form = MalwareUploadForm()
        return render(request, 'malware_upload.html', {'form': form})


class MalwareSourceAddView(CreateView):
    model = MalwareSource
