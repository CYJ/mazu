#! -*- cofing: utf-8 -*-
import os

from django.test import Client
from django.test import TestCase

from django.core.urlresolvers import reverse_lazy

from core.mongodb import connect_gridfs

from .models import Malware


class MalwareTestCase(TestCase):

    def setUp(self):
        self.clt = Client()

    def generate_file(self):
        filepath = os.path.join(os.path.dirname(__file__), 'tests', 'test.txt')
        try:
            fp = open(filepath, 'wb')
            fp.write('HelloWorld')
        finally:
            fp.close()
        return filepath

    def test_can_upload(self):
        testfile = self.generate_file()
        gridfs = connect_gridfs()
        except_count = gridfs.find({'filename': 'test.txt'}).count() + 1

        with open(testfile, 'rb') as fp:
            self.clt.post(
                reverse_lazy('malware_upload'),
                {
                    'name': 'test.txt',
                    'malware': fp,
                    'description': 'test_upload'
                }
            )

        count = gridfs.find({'filename': 'test.txt'}).count()
        self.assertEqual(count, except_count)

        # test can not upload repeatedly
        with open(testfile, 'rb') as fp:
            messages = []
            response = self.clt.post(
                reverse_lazy('malware_upload'),
                {
                    'name': 'test.txt',
                    'malware': fp,
                    'description': 'test_upload'
                }
            )
            for m in response.context['messages']:
                messages.append(m.message)
            self.assertIn('Duplicated Malware Sample.', messages)

    def test_malware_list_view(self):
        malwares = Malware.objects.all()
        response = self.client.get(reverse_lazy('malware_list'))
        self.assertEqual(response.status_code, 200)
        self.assertQuerysetEqual(response.context['malwares'], malwares)
