# -*- coding: utf-8 -*-
import os
import logging

from django.http import Http404
from django.http import HttpResponse
from django.contrib import messages
from django.shortcuts import render
from django.views.generic.edit import FormView
from django.views.generic.edit import CreateView
from django.views.generic.edit import UpdateView
from django.views.generic.edit import DeleteView
from django.views.generic.list import ListView
from django.views.generic.detail import DetailView

from django.core.urlresolvers import reverse_lazy

from core.mongodb import connect_gridfs
from core.mongodb import get_compressed_file
from core.mongodb import delete_file

from .models import Malware
from .models import MalwareSource

from .forms import MalwareUploadForm
from .forms import MalwarePublishForm
from .forms import MalwareUpdateForm
from .forms import MalwareSourceForm

from .utils import compute_hashes
from .utils import compute_ssdeep
from .utils import get_uploaded_file_info


logger = logging.getLogger(__name__)


def download(request, slug):
    try:
        malware = get_compressed_file('sha512', slug)
    except Exception as e:
        logger.debug(e)
        messages.error(request, 'Oops! We got an error!')
        return render(request, 'error.html')
    else:
        if malware:
            response = HttpResponse(malware.read())
            response['Content-Disposition'] = 'attachment; filename={}.zip'.format(slug)
            response['Content-Type'] = 'application/x-zip'
            return response
        else:
            raise Http404


class MalwarePublishView(FormView):
    template_name = 'malware/publish.html'
    form_class = MalwarePublishForm
    success_url = reverse_lazy('malware.list')

    def get_initial(self):
        try:
            sha256 = self.kwargs['slug']
        except:
            return {}
        else:
            return {'malware_sha256': sha256}

class MalwareUploadView(FormView):
    template_name = 'malware/upload.html'
    form_class = MalwareUploadForm
    success_url = reverse_lazy('malware.upload')

    def post(self, request, *args, **kwargs):
        form = MalwareUploadForm(request.POST, request.FILES)
        if form.is_valid():
            uploaded_file = request.FILES['malware']
            file_info = get_uploaded_file_info(uploaded_file)
            try:
                Malware.objects.get(sha256=file_info['sha256'])
            except Malware.DoesNotExist as e:
                # we can create a malware record
                pass
            except Exception as e:
                messages.error(request, e)
                return render(request, 'error.html')
            else:
                messages.error(request, 'Duplicated Malware Sample.')
                return render(request, 'malware/upload.html', {'form': form})

            columns = file_info.copy()
            columns.update({'desc': form.cleaned_data['desc']})
            columns.update({'name': form.cleaned_data['name']})
            # save malware into gridfs
            try:
                gridfs = connect_gridfs()
            except:
                messages.error(request, e)
                return render(request, 'error.html')
            else:
                with gridfs.new_file() as fp:
                    for chunk in uploaded_file.chunks():
                        fp.write(chunk)

                    for attr, value in columns.items():
                        if attr != 'md5':
                            setattr(fp, attr, value)
                    fp.close()
                    instance = Malware(**columns)
                    instance.save()
                messages.success(request, 'New malware created.')
        else:
            form = MalwareUploadForm()
            messages.error(request, 'Please verify the form.')

        return render(request, 'malware/upload.html', {'form': form})


class MalwareUpdateView(UpdateView):
    template_name = 'malware/update.html'
    form_class = MalwareUpdateForm
    success_url = reverse_lazy('malware.list')

    def get_object(self):
        return Malware.objects.get(slug=self.kwargs['slug'])


class MalwareListView(ListView):
    model = Malware
    template_name = 'malware/list.html'
    context_object_name = 'malwares'

    def get_context_data(self, **kwargs):
        context = super(MalwareListView, self).get_context_data(**kwargs)
        malware_sources = MalwareSource.objects.values('label', 'slug')
        context.update({'sources': malware_sources})
        return context


class MalwareDeleteView(DeleteView):
    model = Malware
    template_name = 'malware/delete.html'
    success_url = reverse_lazy('malware.list')

    def get_object(self, **kwargs):
        return Malware.objects.get(slug=self.kwargs['slug'])

    def delete(self, request, *args, **kwargs):
        delete_file('sha512', self.kwargs['slug'])
        return super(MalwareDeleteView, self).delete(request, *args, **kwargs)


class MalwareProfileView(DetailView):
    model = Malware
    template_name = 'malware/profile.html'
    context_object_name = 'malware'

    def get_object(self, **kwargs):
        return Malware.objects.get(slug=self.kwargs['slug'])


class MalwareSourceCreateView(CreateView):
    model = MalwareSource
    template_name = 'malware_source/create.html'
    form_class = MalwareSourceForm
    fields = ['label', 'desc']
    success_url = reverse_lazy('source.list')


class MalwareSourceUpdateView(UpdateView):
    template_name = 'malware_source/update.html'
    form_class = MalwareSourceForm
    fields = ['label', 'desc']
    success_url = reverse_lazy('source.list')

    def get_object(self):
        return MalwareSource.objects.get(slug=self.kwargs['slug'])


class MalwareSourceListView(ListView):
    model = MalwareSource
    template_name = 'malware_source/list.html'
    context_object_name = 'malware_sources'


class MalwareSourceDeleteView(DeleteView):
    model = MalwareSource
    template_name = 'malware_source/delete.html'
    success_url = reverse_lazy('source.list')

    def get_object(self, **kwargs):
        return MalwareSource.objects.get(slug=self.kwargs['slug'])


class MalwareSourceProfileView(DetailView):
    model = MalwareSource
    template_name = 'malware_source/profile.html'
    context_object_name = 'malware_source'

    def get_object(self, **kwargs):
        return MalwareSource.objects.get(slug=self.kwargs['slug'])
